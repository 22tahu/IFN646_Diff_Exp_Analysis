common_down <- intersect(detected_down_NOISeq, meta_down)
length(common_down)
#Upregulated
#A gene is downregulated in condition 1 compared to condition 2 (equals when M = "down"),
#it is the same thing as saying it is upregulated in condition 2 compared to condition 1.
#detected_up represent the up regulated genes in condition 2 compared to condition 1.
# upregulated in condition 2 compared to condition 1
detected_up = degenes(results, q = 0.8, M = "down")
detected_up
annotated_results_up <- merge(as.data.frame(detected_up), meta_data, by="row.names", all.x=TRUE)
annotated_results_up
rownames(annotated_results_up) <- annotated_results_up$Row.names
annotated_results_up$Row.names <- NULL
detected_up_NOISeq <- rownames(annotated_results_up)
detected_up_NOISeq
#from differentially expressed genes, actually downregulated according to metadata
meta_up <- rownames(annotated_results[annotated_results$upregulation == 1,])
meta_up
common_up <- intersect(detected_up_NOISeq, meta_up)
length(common_up)
# Step 10: Summarize outliers
outliers_up <- setdiff(detected_up_NOISeq, meta_up)
outliers_up
write.csv(outliers_up, "Working Directory/Output/noiseq_6_750_250_outliers_upregulated.csv", row.names = FALSE)
outliers_down <- setdiff(detected_down_NOISeq, meta_down)
write.csv(outliers_down, "Working Directory/Output/noiseq6_750_250_outliers_downregulated.csv", row.names = FALSE)
# Step 11: Accuracy and Precision Matrix
true_positives <- length(common_up) + length(common_down)
false_positives <- length(setdiff(detected_up_NOISeq, meta_up)) + length(setdiff(detected_down_NOISeq, meta_down))
true_negatives <- nrow(meta_data) - (length(meta_up) + length(meta_down)) - false_positives
false_negatives <- length(setdiff(meta_up, detected_up_NOISeq)) + length(setdiff(meta_down, detected_down_NOISeq))
accuracy <- (true_positives + true_negatives) / nrow(meta_data)
precision <- true_positives / (true_positives + false_positives)
recall <- true_positives / (true_positives + false_negatives)
f1_score <- 2 * ((precision * recall) / (precision + recall))
# Step 12: Output Metrics to CSV for further analysis outside R
metrics_df <- data.frame(
True_Positives = true_positives,
False_Positives = false_positives,
True_Negatives = true_negatives,
False_Negatives = false_negatives,
Accuracy = accuracy,
Precision = precision,
Recall = recall,
F1_Score = f1_score
)
write.csv(metrics_df, "Working Directory/Output/Metrics_noiseq_3_500_500.csv", row.names = FALSE)
# BELOW TO BE Included in overall metric output if needed or deleted if used for debugging - NISH to action
# could be useful when expanding metrics to include time for code to execute - analysis output as a proxy for efficency
nrow(DEgenes) #total differentilly expressed genes identified by noiseq
nrow(detected_down) #total down regulated differentilly expressed genes identified by noiseq
nrow(detected_up) #total up regulated differentilly expressed genes identified by noiseq
true_positives
false_positives
true_negatives
false_negatives
accuracy
precision
recall
f1_score
# Step 1: Call Library (NOISeq)
library(NOISeq)
# Step 2: Load Dataset
count_data <- read.table("RAW data/6_750_250.tsv", header=TRUE, row.names=1)
# Step 3: Create a conditions factor and a matrix of data
condition <- rep(c("condition1", "condition2"), each = 6)
sample_names <- paste(condition, 1:12, sep="_") # This will create unique names like "condition1_1", "condition1_2", etc.
colnames(count_data) <- sample_names
# Creating a data frame for the sample conditions
sampleinfo <- data.frame(row.names=sample_names, condition=condition)
sampleinfo
#Filtering data
#Excluding features with low counts improves differential expression results, since noise in the data is reduced
#counts per million (CPM) method is used to filtering
count_data = filtered.data(count_data, factor = sampleinfo$condition, norm=FALSE, depth=NULL, method=1, cv.cutoff=100, cpm=1, p.adj="fdr")
count_data
# Step 4: Create NOISeq object
mydata <- readData(data=count_data, factors=sampleinfo)
mydata
# Step 5: Differential expression analysis with NOISeq
results <- noiseq(mydata, k = 0.5, norm = "tmm", replicates = "technical", factor = "condition")
# Step 6: Extract differentially expressed genes(total differentially exprssed genes)
DEgenes <- degenes(results, q = 0.8, M = NULL)
DEgenes
# Step 7: Load Metadata
meta_data <- read.table("RAW data/6_750_250_meta.tsv", header=TRUE, row.names=1)
meta_data
# Step 8: Merge with Meta Data
annotated_results <- merge(as.data.frame(DEgenes), meta_data, by="row.names", all.x=TRUE)
annotated_results
rownames(annotated_results) <- annotated_results$Row.names
annotated_results$Row.names <- NULL
# Step 9: Comparison
#A gene is upregulated in condition 1 compared to condition 2 (equals when M = "up"),
#it is the same thing as saying it is downregulated in condition 2 compared to condition 1.
#detected_down represent the down regulated genes in condition 2 compared to condition 1.
# Downregulated in condition 2 compared to condition 1
detected_down = degenes(results, q = 0.8, M = "up")
detected_down
annotated_results_down <- merge(as.data.frame(detected_down), meta_data, by="row.names", all.x=TRUE)
annotated_results_down
rownames(annotated_results_down) <- annotated_results_down$Row.names
annotated_results_down$Row.names <- NULL
detected_down_NOISeq <- rownames(annotated_results_down)
detected_down_NOISeq
#from differentially expressed genes, actually downregulated according to metadata
meta_down <- rownames(annotated_results[annotated_results$downregulation == 1,])
meta_down
common_down <- intersect(detected_down_NOISeq, meta_down)
length(common_down)
#Upregulated
#A gene is downregulated in condition 1 compared to condition 2 (equals when M = "down"),
#it is the same thing as saying it is upregulated in condition 2 compared to condition 1.
#detected_up represent the up regulated genes in condition 2 compared to condition 1.
# upregulated in condition 2 compared to condition 1
detected_up = degenes(results, q = 0.8, M = "down")
detected_up
annotated_results_up <- merge(as.data.frame(detected_up), meta_data, by="row.names", all.x=TRUE)
annotated_results_up
rownames(annotated_results_up) <- annotated_results_up$Row.names
annotated_results_up$Row.names <- NULL
detected_up_NOISeq <- rownames(annotated_results_up)
detected_up_NOISeq
#from differentially expressed genes, actually downregulated according to metadata
meta_up <- rownames(annotated_results[annotated_results$upregulation == 1,])
meta_up
common_up <- intersect(detected_up_NOISeq, meta_up)
length(common_up)
# Step 10: Summarize outliers
outliers_up <- setdiff(detected_up_NOISeq, meta_up)
outliers_up
write.csv(outliers_up, "Working Directory/Output/noiseq_6_750_250_outliers_upregulated.csv", row.names = FALSE)
outliers_down <- setdiff(detected_down_NOISeq, meta_down)
write.csv(outliers_down, "Working Directory/Output/noiseq6_750_250_outliers_downregulated.csv", row.names = FALSE)
# Step 11: Accuracy and Precision Matrix
true_positives <- length(common_up) + length(common_down)
false_positives <- length(setdiff(detected_up_NOISeq, meta_up)) + length(setdiff(detected_down_NOISeq, meta_down))
true_negatives <- nrow(meta_data) - (length(meta_up) + length(meta_down)) - false_positives
false_negatives <- length(setdiff(meta_up, detected_up_NOISeq)) + length(setdiff(meta_down, detected_down_NOISeq))
accuracy <- (true_positives + true_negatives) / nrow(meta_data)
precision <- true_positives / (true_positives + false_positives)
recall <- true_positives / (true_positives + false_negatives)
f1_score <- 2 * ((precision * recall) / (precision + recall))
# Step 12: Output Metrics to CSV for further analysis outside R
metrics_df <- data.frame(
True_Positives = true_positives,
False_Positives = false_positives,
True_Negatives = true_negatives,
False_Negatives = false_negatives,
Accuracy = accuracy,
Precision = precision,
Recall = recall,
F1_Score = f1_score
)
write.csv(metrics_df, "Working Directory/Output/Metrics_noiseq_6_750_250.csv", row.names = FALSE)
# BELOW TO BE Included in overall metric output if needed or deleted if used for debugging - NISH to action
# could be useful when expanding metrics to include time for code to execute - analysis output as a proxy for efficency
nrow(DEgenes) #total differentilly expressed genes identified by noiseq
nrow(detected_down) #total down regulated differentilly expressed genes identified by noiseq
nrow(detected_up) #total up regulated differentilly expressed genes identified by noiseq
true_positives
false_positives
true_negatives
false_negatives
accuracy
precision
recall
f1_score
# Main Run Script
# Run DESeq2
source("Working Directory/Deseq2_Analysis/deseq2_3_500_500.R")
source("Working Directory/Deseq2_Analysis/deseq2_3_750_250.R")
source("Working Directory/Deseq2_Analysis/deseq2_3_1000_0.R")
source("Working Directory/Deseq2_Analysis/deseq2_6_500_500.R")
source("Working Directory/Deseq2_Analysis/deseq2_6_750_250.R")
source("Working Directory/Deseq2_Analysis/deseq2_6_1000_0.R")
source("Working Directory/Deseq2_Analysis/deseq2_9_500_500.R")
source("Working Directory/Deseq2_Analysis/deseq2_9_750_250.R")
source("Working Directory/Deseq2_Analysis/deseq2_9_1000_0.R")
#Run Edge R Files
source("Working Directory/EdgeR_Analysis/edgeR_3_500_500.R")
source("Working Directory/EdgeR_Analysis/edgeR_3_750_250.R")
source("Working Directory/EdgeR_Analysis/edgeR_3_1000_0.R")
source("Working Directory/EdgeR_Analysis/edgeR_6_500_500.R")
source("Working Directory/EdgeR_Analysis/edgeR_6_750_250.R")
source("Working Directory/EdgeR_Analysis/edgeR_6_1000_0.R")
source("Working Directory/EdgeR_Analysis/edgeR_9_500_500.R")
source("Working Directory/EdgeR_Analysis/edgeR_9_750_250.R")
source("Working Directory/EdgeR_Analysis/edgeR_9_1000_0.R")
# Run NOISeq
source("Working Directory/Noiseq_Analysis/noiseq_3_500_500.R")
source("Working Directory/Noiseq_Analysis/noiseq_3_750_250.R")
source("Working Directory/Noiseq_Analysis/noiseq_3_1000_0.R")
source("Working Directory/Noiseq_Analysis/noiseq_6_500_500.R")
source("Working Directory/Noiseq_Analysis/noiseq_6_750_250.R")
source("Working Directory/Noiseq_Analysis/noiseq_6_1000_0.R")
source("Working Directory/Noiseq_Analysis/noiseq_9_500_500.R")
source("Working Directory/Noiseq_Analysis/noiseq_9_750_250.R")
source("Working Directory/Noiseq_Analysis/noiseq_9_1000_0.R")
#Load in Metrics into a combined dataframe
#Analysis outputs and pretty pictures
# Test for 3_500_500
desq2_3_500_500_df <- read.csv("Working Directory/Output/deseq2_3_500_500.csv", stringsAsFactors = FALSE)
# Test for 3_500_500
desq2_3_500_500_DOWN_df <- read.csv("Working Directory/Output/deseq2_3_500_500_outliers_downregulated.csv", stringsAsFactors = FALSE)
edger_3_500_500_DOWN_df <- read.csv("Working Directory/Output/edger_3_500_500_outliers_downregulated.csv", stringsAsFactors = FALSE)
noiseq_3_500_500_DOWN_df <- read.csv("Working Directory/Output/noiseq_3_500_500_outliers_downregulated.csv", stringsAsFactors = FALSE)
# Test for 3_500_500
desq2_3_500_500_DOWN_df <- read.csv("Working Directory/Output/deseq2_3_500_500_outliers_downregulated.csv", stringsAsFactors = FALSE)
edger_3_500_500_DOWN_df <- read.csv("Working Directory/Output/edger_3_500_500_outliers_downregulated.csv", stringsAsFactors = FALSE)
noiseq_3_500_500_DOWN_df <- read.csv("Working Directory/Output/noiseq_3_500_500_outliers_downregulated.csv", stringsAsFactors = FALSE)
View(desq2_3_500_500_DOWN_df)
View(edger_3_500_500_DOWN_df)
View(noiseq_3_500_500_DOWN_df)
max_rows <- max(length(desq2_3_500_500_DOWN_df), length(edger_3_500_500_DOWN_df), length(noiseq_3_500_500_DOWN_df))
desq2_3_500_500_DOWN_df <- read.csv("Working Directory/Output/deseq2_3_500_500_outliers_downregulated.csv", stringsAsFactors = FALSE)
edger_3_500_500_DOWN_df <- read.csv("Working Directory/Output/edger_3_500_500_outliers_downregulated.csv", stringsAsFactors = FALSE)
noiseq_3_500_500_DOWN_df <- read.csv("Working Directory/Output/noiseq_3_500_500_outliers_downregulated.csv", stringsAsFactors = FALSE)
max_rows <- max(length(desq2_3_500_500_DOWN_df), length(edger_3_500_500_DOWN_df), length(noiseq_3_500_500_DOWN_df))
deseq2_values <- c(desq2_3_500_500_DOWN_df, rep(NA, max_rows - length(desq2_3_500_500_DOWN_df)))
edger_values <- c(edger_3_500_500_DOWN_df, rep(NA, max_rows - length(edger_3_500_500_DOWN_df)))
noiseq_values <- c(noiseq_3_500_500_DOWN_df, rep(NA, max_rows - length(noiseq_3_500_500_DOWN_df)))
combined_df <- data.frame(deseq2 = deseq2_values, edger = edger_values, noiseq = noiseq_values)
# Test for 3_500_500
desq2_3_500_500_DOWN_df <- read.csv("Working Directory/Output/deseq2_3_500_500_outliers_downregulated.csv", stringsAsFactors = FALSE)
edger_3_500_500_DOWN_df <- read.csv("Working Directory/Output/edger_3_500_500_outliers_downregulated.csv", stringsAsFactors = FALSE)
noiseq_3_500_500_DOWN_df <- read.csv("Working Directory/Output/noiseq_3_500_500_outliers_downregulated.csv", stringsAsFactors = FALSE)
deseq2_values <- desq2_3_500_500_DOWN_df[[1]]
edger_values <- edger_3_500_500_DOWN_df[[1]]
noiseq_values <- noiseq_3_500_500_DOWN_df[[1]]
max_rows <- max(length(deseq2_values), length(edger_values), length(noiseq_values))
deseq2_values <- c(deseq2_values, rep(NA, max_rows - length(deseq2_values)))
edger_values <- c(edger_values, rep(NA, max_rows - length(edger_values)))
noiseq_values <- c(noiseq_values, rep(NA, max_rows - length(noiseq_values)))
combined_df <- data.frame(deseq2 = deseq2_values, edger = edger_values, noiseq = noiseq_values)
View(combined_df)
# Test for 3_500_500
desq2_3_500_500_DOWN_df <- read.csv("Working Directory/Output/deseq2_3_500_500_outliers_downregulated.csv", stringsAsFactors = FALSE)
edger_3_500_500_DOWN_df <- read.csv("Working Directory/Output/edger_3_500_500_outliers_downregulated.csv", stringsAsFactors = FALSE)
noiseq_3_500_500_DOWN_df <- read.csv("Working Directory/Output/noiseq_3_500_500_outliers_downregulated.csv", stringsAsFactors = FALSE)
deseq2_3_500_500_DOWN_values <- desq2_3_500_500_DOWN_df[[1]]
edger_3_500_500_DOWN_values <- edger_3_500_500_DOWN_df[[1]]
noiseq_3_500_500_DOWN_values <- noiseq_3_500_500_DOWN_df[[1]]
max_rows <- max(length(deseq2_values), length(edger_values), length(noiseq_values))
#Load in Metrics into a combined dataframe
# Test for 3_500_500
desq2_3_500_500_DOWN_df <- read.csv("Working Directory/Output/deseq2_3_500_500_outliers_downregulated.csv", stringsAsFactors = FALSE)
edger_3_500_500_DOWN_df <- read.csv("Working Directory/Output/edger_3_500_500_outliers_downregulated.csv", stringsAsFactors = FALSE)
noiseq_3_500_500_DOWN_df <- read.csv("Working Directory/Output/noiseq_3_500_500_outliers_downregulated.csv", stringsAsFactors = FALSE)
# Extract the relevant columns
deseq2_values <- desq2_3_500_500_DOWN_df[[1]]
edger_values <- edger_3_500_500_DOWN_df[[1]]
noiseq_values <- noiseq_3_500_500_DOWN_df[[1]]
# Determine the maximum number of rows among the three data frames
max_rows <- max(length(deseq2_values), length(edger_values), length(noiseq_values))
# Create vectors of NAs to fill in the missing values
deseq2_values <- c(deseq2_values, rep(NA, max_rows - length(deseq2_values)))
edger_values <- c(edger_values, rep(NA, max_rows - length(edger_values)))
noiseq_values <- c(noiseq_values, rep(NA, max_rows - length(noiseq_values)))
# Combine the vectors into a single data frame
combined_df <- data.frame(deseq2 = deseq2_3_500_500_DOWN_values, edger = edger_3_500_500_DOWN_values, noiseq = noiseq_3_500_500_DOWN_values)
# POC for 3_500_500
desq2_3_500_500_DOWN_df <- read.csv("Working Directory/Output/deseq2_3_500_500_outliers_downregulated.csv", stringsAsFactors = FALSE)
edger_3_500_500_DOWN_df <- read.csv("Working Directory/Output/edger_3_500_500_outliers_downregulated.csv", stringsAsFactors = FALSE)
noiseq_3_500_500_DOWN_df <- read.csv("Working Directory/Output/noiseq_3_500_500_outliers_downregulated.csv", stringsAsFactors = FALSE)
deseq2_values <- desq2_3_500_500_DOWN_df[[1]]
edger_values <- edger_3_500_500_DOWN_df[[1]]
noiseq_values <- noiseq_3_500_500_DOWN_df[[1]]
max_rows <- max(length(deseq2_values), length(edger_values), length(noiseq_values))
deseq2_values <- c(deseq2_values, rep(NA, max_rows - length(deseq2_values)))
edger_values <- c(edger_values, rep(NA, max_rows - length(edger_values)))
noiseq_values <- c(noiseq_values, rep(NA, max_rows - length(noiseq_values)))
combined_df <- data.frame(desq2_3_500_500_DOWNREGULATED = deseq2_values, edger_3_500_500_DOWNREGULATED = edger_values, noiseq_3_500_500_DOWNREGULATED = noiseq_values)
View(combined_df)
OutputDir <- "Working Directory/Output/"
DownregulatedStr <-"_outliers_downregulated.csv"
testDF <- read.csv(OutputDir + "deseq2_" + Sample_3_500_500 + DownregulatedStr)
# POC for 3_500_500 - THIS WILL NOT STAY, but its a 1am POC that will need to be paramertised and made elegant - we will eventually move away from the manual csv comparisons for up/down regulated comparisons of overlaping mis-identified genes
desq2_3_500_500_DOWN_df <- read.csv("Working Directory/Output/deseq2_3_500_500_outliers_downregulated.csv", stringsAsFactors = FALSE)
edger_3_500_500_DOWN_df <- read.csv("Working Directory/Output/edger_3_500_500_outliers_downregulated.csv", stringsAsFactors = FALSE)
noiseq_3_500_500_DOWN_df <- read.csv("Working Directory/Output/noiseq_3_500_500_outliers_downregulated.csv", stringsAsFactors = FALSE)
deseq2_values <- desq2_3_500_500_DOWN_df[[1]]
edger_values <- edger_3_500_500_DOWN_df[[1]]
noiseq_values <- noiseq_3_500_500_DOWN_df[[1]]
max_rows <- max(length(deseq2_values), length(edger_values), length(noiseq_values))
deseq2_values <- c(deseq2_values, rep(NA, max_rows - length(deseq2_values)))
edger_values <- c(edger_values, rep(NA, max_rows - length(edger_values)))
noiseq_values <- c(noiseq_values, rep(NA, max_rows - length(noiseq_values)))
combined_df <- data.frame(desq2_3_500_500_DOWNREGULATED = deseq2_values, edger_3_500_500_DOWNREGULATED = edger_values, noiseq_3_500_500_DOWNREGULATED = noiseq_values)
View(combined_df)
# POC for 3_500_500 - THIS WILL NOT STAY, but its a 1am POC that will need to be paramertised and made elegant - we will eventually move away from the manual csv comparisons for up/down regulated comparisons of overlaping mis-identified genes
desq2_3_500_500_DOWN_df <- read.csv("Working Directory/Output/deseq2_3_500_500_outliers_downregulated.csv", stringsAsFactors = FALSE)
edger_3_500_500_DOWN_df <- read.csv("Working Directory/Output/edger_3_500_500_outliers_downregulated.csv", stringsAsFactors = FALSE)
noiseq_3_500_500_DOWN_df <- read.csv("Working Directory/Output/noiseq_3_500_500_outliers_downregulated.csv", stringsAsFactors = FALSE)
deseq2_values <- desq2_3_500_500_DOWN_df[[1]]
edger_values <- edger_3_500_500_DOWN_df[[1]]
noiseq_values <- noiseq_3_500_500_DOWN_df[[1]]
max_rows <- max(length(deseq2_values), length(edger_values), length(noiseq_values))
deseq2_values <- c(deseq2_values, rep(NA, max_rows - length(deseq2_values)))
edger_values <- c(edger_values, rep(NA, max_rows - length(edger_values)))
noiseq_values <- c(noiseq_values, rep(NA, max_rows - length(noiseq_values)))
downregulated_genes_3_500_500 <- data.frame(desq2_3_500_500_DOWNREGULATED = deseq2_values, edger_3_500_500_DOWNREGULATED = edger_values, noiseq_3_500_500_DOWNREGULATED = noiseq_values)
View(downregulated_genes_3_500_500)
# Variables for parameterization
OutputDir <- "Working Directory/Output/"
DownregulatedStr <- "_outliers_downregulated.csv"
UpRegulatedStr <- "_outliers_upregulated.csv"
groupings <- c("3_500_500", "3_750_250", "3_1000_0", "6_500_500", "6_750_250", "6_1000_0", "9_500_500", "9_750_250", "9_1000_0")
methods <- c("deseq2", "edger", "noiseq")
# Function to read and process data
read_and_process <- function(method, grouping, OutputDir, RegulationStr) {
df <- read.csv(paste0(OutputDir, method, "_", grouping, RegulationStr), stringsAsFactors = FALSE)
return(df[[1]])
}
# Create a list to store all dataframes
all_dataframes <- list()
# Loop through each grouping and regulation type
for (grouping in groupings) {
for (RegulationStr in c(DownregulatedStr, UpRegulatedStr)) {
# Create an empty dataframe
combined_df <- data.frame()
# Loop through each method
for (method in methods) {
values <- read_and_process(method, grouping, OutputDir, RegulationStr)
max_rows <- max(nrow(combined_df), length(values))
# Extend the existing columns to the new max_rows
combined_df[] <- lapply(combined_df, function(col) {
c(col, rep(NA, max_rows - length(col)))
})
# Add the new column
combined_df[paste0(method, "_", ifelse(RegulationStr == DownregulatedStr, "DOWN", "UP"))] <- c(values, rep(NA, max_rows - length(values)))
}
# Store the dataframe in the list with a unique name
all_dataframes[[paste0(grouping, "_", ifelse(RegulationStr == DownregulatedStr, "DOWN", "UP"))]] <- combined_df
}
}
# Variables for parameterization
OutputDir <- "Working Directory/Output/"
DownregulatedStr <- "_outliers_downregulated.csv"
UpRegulatedStr <- "_outliers_upregulated.csv"
groupings <- c("3_500_500", "3_750_250", "3_1000_0", "6_500_500", "6_750_250", "6_1000_0", "9_500_500", "9_750_250", "9_1000_0")
methods <- c("deseq2", "edger", "noiseq")
# Function to read and process data
read_and_process <- function(method, grouping, OutputDir, RegulationStr) {
df <- read.csv(paste0(OutputDir, method, "_", grouping, RegulationStr), stringsAsFactors = FALSE)
return(df[[1]])
}
# Create a list to store all dataframes
all_dataframes <- list()
# Loop through each grouping and regulation type
for (grouping in groupings) {
for (RegulationStr in c(DownregulatedStr, UpRegulatedStr)) {
# Initialize the dataframe with the first method's data
combined_df <- data.frame(methods[1] = read_and_process(methods[1], grouping, OutputDir, RegulationStr))
#parametrerised attempt
OutputDir <- "Working Directory/Output/"
DownregulatedStr <- "_outliers_downregulated.csv"
UpRegulatedStr <- "_outliers_upregulated.csv"
groupings <- c("3_500_500", "3_750_250", "3_1000_0", "6_500_500", "6_750_250", "6_1000_0", "9_500_500", "9_750_250", "9_1000_0")
toolset <- c("deseq2", "edger", "noiseq")
# POC for 3_500_500 - THIS WILL NOT STAY, but its a 1am POC that will need to be paramertised and made elegant - we will eventually move away from the manual csv comparisons for up/down regulated comparisons of overlaping mis-identified genes
desq2_3_500_500_DOWN_df <- read.csv("Working Directory/Output/deseq2_3_500_500_outliers_downregulated.csv", stringsAsFactors = FALSE)
edger_3_500_500_DOWN_df <- read.csv("Working Directory/Output/edger_3_500_500_outliers_downregulated.csv", stringsAsFactors = FALSE)
noiseq_3_500_500_DOWN_df <- read.csv("Working Directory/Output/noiseq_3_500_500_outliers_downregulated.csv", stringsAsFactors = FALSE)
deseq2_values <- desq2_3_500_500_DOWN_df[[1]]
edger_values <- edger_3_500_500_DOWN_df[[1]]
noiseq_values <- noiseq_3_500_500_DOWN_df[[1]]
max_rows <- max(length(deseq2_values), length(edger_values), length(noiseq_values))
deseq2_values <- c(deseq2_values, rep(NA, max_rows - length(deseq2_values)))
edger_values <- c(edger_values, rep(NA, max_rows - length(edger_values)))
noiseq_values <- c(noiseq_values, rep(NA, max_rows - length(noiseq_values)))
downregulated_genes_3_500_500 <- data.frame(desq2_3_500_500_DOWNREGULATED = deseq2_values, edger_3_500_500_DOWNREGULATED = edger_values, noiseq_3_500_500_DOWNREGULATED = noiseq_values)
#parametrerised attempt
OutputDir <- "Working Directory/Output/"
DownregulatedStr <- "_outliers_downregulated.csv"
UpRegulatedStr <- "_outliers_upregulated.csv"
groupings <- c("3_500_500", "3_750_250", "3_1000_0", "6_500_500", "6_750_250", "6_1000_0", "9_500_500", "9_750_250", "9_1000_0")
toolset <- c("deseq2", "edger", "noiseq")
View(desq2_3_500_500_DOWN_df)
View(downregulated_genes_3_500_500)
library(VennDiagram)
# Create the Venn diagram
venn.diagram(
x = list(
deseq2 = deseq2_values[!is.na(deseq2_values)],
edger = edger_values[!is.na(edger_values)],
noiseq = noiseq_values[!is.na(noiseq_values)]
),
category.names = c("deseq2", "edger", "noiseq"),
output = TRUE,
filename = "venn_3_500_500_downregulated.png",
output.type = "png",
imagetype = "png",
resolution = 300
)
library(VennDiagram)
# Create the Venn diagram
venn.diagram(
x = list(
deseq2 = deseq2_values[!is.na(deseq2_values)],
edger = edger_values[!is.na(edger_values)],
noiseq = noiseq_values[!is.na(noiseq_values)]
),
category.names = c("deseq2", "edger", "noiseq"),
output = TRUE,
filename = "Working Directory/Output/venn_3_500_500_downregulated.png",
output.type = "png",
imagetype = "png",
resolution = 300
)
# Create the Venn diagram
venn.diagram(
x = list(
deseq2 = deseq2_values[!is.na(deseq2_values)],
edger = edger_values[!is.na(edger_values)],
noiseq = noiseq_values[!is.na(noiseq_values)]
),
category.names = c("deseq2", "edger", "noiseq"),
output = TRUE,
filename = "Working Directory/Output/venn_3_500_500_downregulated.png",
output.type = "png",
imagetype = "png",
resolution = 300,
category.col = c("red", "blue", "green"), # Colors for the labels
fill = c("red", "blue", "green", "yellow", "purple", "cyan", "green") # Colors for the Venn areas
)
library(VennDiagram)
# Create the Venn diagram
venn.diagram(
x = list(
deseq2 = deseq2_values[!is.na(deseq2_values)],
edger = edger_values[!is.na(edger_values)],
noiseq = noiseq_values[!is.na(noiseq_values)]
),
category.names = c("deseq2", "edger", "noiseq"),
output = TRUE,
filename = "Working Directory/Output/venn_3_500_500_downregulated.png",
output.type = "png",
imagetype = "png",
resolution = 300,
category.col = c("red", "blue", "green"), # Colors for the labels
fill = c("red", "blue", "green", "yellow", "purple", "cyan", "green") # Colors for the Venn areas
)
library(VennDiagram)
# Create the Venn diagram
venn.diagram(
x = list(
deseq2 = deseq2_values[!is.na(deseq2_values)],
edger = edger_values[!is.na(edger_values)],
noiseq = noiseq_values[!is.na(noiseq_values)]
),
category.names = c("deseq2", "edger", "noiseq"),
output = TRUE,
filename = "Working Directory/Output/venn_3_500_500_downregulated.png",
output.type = "png",
imagetype = "png",
resolution = 300,
category.col = c("red", "blue", "green"), # Colors for the labels
fill = c("red", "blue", "green") # Colors for the Venn areas
)
library(VennDiagram)
# Create the Venn diagram
venn.diagram(
x = list(
deseq2 = deseq2_values[!is.na(deseq2_values)],
edger = edger_values[!is.na(edger_values)],
noiseq = noiseq_values[!is.na(noiseq_values)]
),
category.names = c("deseq2", "edger", "noiseq"),
output = TRUE,
filename = "Working Directory/Output/venn_3_500_500_downregulated.png",
output.type = "png",
imagetype = "png",
resolution = 300,
category.col = c("red", "blue", "green"), # Colors for the labels
fill = c("red", "blue", "green", "yellow", "blue", "yellow", "green") # Colors for the Venn areas
)
library(VennDiagram)
# Create the Venn diagram
venn.diagram(
x = list(
deseq2 = deseq2_values[!is.na(deseq2_values)],
edger = edger_values[!is.na(edger_values)],
noiseq = noiseq_values[!is.na(noiseq_values)]
),
category.names = c("deseq2", "edger", "noiseq"),
output = TRUE,
filename = "Working Directory/Output/venn_3_500_500_downregulated.png",
output.type = "png",
imagetype = "png",
resolution = 300,
category.col = c("red", "blue", "green"), # Colors for the labels
fill = c("red", "blue", "green") ,# Colors for the Venn areas
category.pos = c(0, 0.1, 2.5) # Adjust the position of the labels. The values can be tweaked as needed.
)
library(VennDiagram)
# Create the Venn diagram
venn.diagram(
x = list(
deseq2 = deseq2_values[!is.na(deseq2_values)],
edger = edger_values[!is.na(edger_values)],
noiseq = noiseq_values[!is.na(noiseq_values)]
),
category.names = c("deseq2", "edger", "noiseq"),
output = TRUE,
filename = "Working Directory/Output/venn_3_500_500_downregulated.png",
output.type = "png",
imagetype = "png",
resolution = 300,
category.col = c("red", "blue", "green"), #btw im colourblind so please feel free to update the colours
fill = c("red", "blue", "green")
)
